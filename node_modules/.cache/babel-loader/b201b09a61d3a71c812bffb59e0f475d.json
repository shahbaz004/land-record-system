{"ast":null,"code":"var _jsxFileName = \"/home/muneeb/Downloads/IPFS-upload-master/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\nimport Loader from './Loader';\nimport { encode as base64_encode } from 'base-64';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst IPFS = require('ipfs-api');\n\nlet secrets = process.env.REACT_APP_INFURA_PROJECT_ID + ':' + process.env.REACT_APP_INFURA_PROJECT_SECRET;\nlet encodedSecrets = base64_encode(secrets);\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    Authorization: 'Basic ' + encodedSecrets\n  }\n});\n\nfunction App() {\n  _s();\n\n  const [buf, setBuf] = useState();\n  const [hash, setHash] = useState(\"\");\n  const [loader, setLoader] = useState(false);\n  const [showLinks, setShowLinks] = useState(false);\n\n  const captureFile = event => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => convertToBuffer(reader);\n  };\n\n  const convertToBuffer = async reader => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result);\n    setBuf(buffer);\n  };\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    setLoader(true);\n    let ipfsId;\n    const buffer = buf;\n    await ipfs.add(buffer).then(response => {\n      ipfsId = response[0].hash;\n      console.log(\"Generated IPFS Hash: \", ipfsId);\n      setHash(ipfsId);\n    }).catch(err => {\n      console.error(err);\n      alert('An error occurred. Please check the console');\n    });\n    if (ipfsId) setShowLinks(true);else setShowLinks(false);\n    setLoader(false);\n  };\n\n  if (loader) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload files to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \" Choose file to upload to IPFS \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: captureFile,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), showLinks ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"---------------------------------------------------------------------------------------------\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: [\"IPFS Hash: \", hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Non clickabe Link: https://ipfs.io/ipfs/\", hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://ipfs.io/ipfs/\" + hash,\n        children: \"Clickable Link to view file on IPFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CgueCm+vQ6IDNShBFa0K8dYyP9o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/muneeb/Downloads/IPFS-upload-master/src/App.js"],"names":["useState","Button","Form","Loader","encode","base64_encode","require","config","IPFS","secrets","process","env","REACT_APP_INFURA_PROJECT_ID","REACT_APP_INFURA_PROJECT_SECRET","encodedSecrets","ipfs","host","port","protocol","headers","Authorization","App","buf","setBuf","hash","setHash","loader","setLoader","showLinks","setShowLinks","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","onSubmit","ipfsId","add","then","response","console","log","catch","err","error","alert"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\nimport Loader from './Loader';\nimport { encode as base64_encode } from 'base-64';\nrequire('dotenv').config()\nconst IPFS = require('ipfs-api');\n\nlet secrets = process.env.REACT_APP_INFURA_PROJECT_ID + ':' + process.env.REACT_APP_INFURA_PROJECT_SECRET;\nlet encodedSecrets = base64_encode(secrets);\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io', port: 5001, protocol: 'https', headers: {\n    Authorization: 'Basic ' + encodedSecrets\n  }\n});\n\nfunction App() {\n  const [buf, setBuf] = useState();\n  const [hash, setHash] = useState(\"\");\n  const [loader, setLoader] = useState(false);\n  const [showLinks, setShowLinks] = useState(false);\n\n  const captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => convertToBuffer(reader)\n  };\n\n  const convertToBuffer = async (reader) => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result);\n    setBuf(buffer);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setLoader(true);\n    let ipfsId\n    const buffer = buf\n    await ipfs.add(buffer)\n      .then((response) => {\n        ipfsId = response[0].hash\n        console.log(\"Generated IPFS Hash: \", ipfsId)\n        setHash(ipfsId);\n      }).catch((err) => {\n        console.error(err)\n        alert('An error occurred. Please check the console');\n      })\n    if (ipfsId)\n      setShowLinks(true)\n    else\n      setShowLinks(false)\n    setLoader(false);\n  }\n  if (loader) {\n    return (\n      <Loader />\n    )\n  }\n  return (\n    <div>\n      <h1>Upload files to IPFS</h1>\n      <h5> Choose file to upload to IPFS </h5>\n      <Form onSubmit={onSubmit}>\n        <input type=\"file\" onChange={captureFile} required />\n        <Button type=\"submit\">Upload</Button>\n      </Form>\n      {\n        showLinks ?\n          <div>\n            <p>---------------------------------------------------------------------------------------------</p>\n            <h6>IPFS Hash: {hash}</h6>\n            <p>Non clickabe Link: https://ipfs.io/ipfs/{hash}</p>\n            <a href={\"https://ipfs.io/ipfs/\" + hash}>Clickable Link to view file on IPFS</a>\n          </div> :\n          <p></p>\n\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}