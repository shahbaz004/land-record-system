{"ast":null,"code":"var _jsxFileName = \"/home/muneeb/Downloads/IPFS-upload-master/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\nimport Loader from './Loader';\nimport { encode as base64_encode } from 'base-64';\nimport dotenv from 'dotenv'; // import dotenv as a module instead of using require\n\nimport IPFS from 'ipfs-api'; // use the recommended ES6 import syntax\n// import { Button } from 'antd';\n\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndotenv.config();\nconst secrets = process.env.REACT_APP_INFURA_PROJECT_ID + ':' + process.env.REACT_APP_INFURA_PROJECT_SECRET;\nconst encodedSecrets = base64_encode(secrets);\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    Authorization: 'Basic ' + encodedSecrets\n  }\n});\n\nfunction Home() {\n  _s();\n\n  const [buf, setBuf] = useState(null);\n  const [hash, setHash] = useState('');\n  const [updateHash, setupdateHash] = useState('');\n  const [loader, setLoader] = useState(false);\n  const [showLinks, setShowLinks] = useState(false);\n  const [showMetadataForm, setShowMetadataForm] = useState(false);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [ipfsId, setIpfsId] = useState('');\n\n  const captureFile = event => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => convertToBuffer(reader);\n  };\n\n  const convertToBuffer = async reader => {\n    const buffer = await Buffer.from(reader.result);\n    setBuf(buffer);\n  };\n\n  const input = {\n    Name: name,\n    Description: description,\n    image: 'https://ipfs.io/ipfs/' + hash\n  };\n\n  const handlePush = async () => {\n    try {\n      const res = await ipfs.files.add(Buffer.from(JSON.stringify(input)));\n      const result = res[0].hash;\n      setupdateHash(result);\n      console.log('added data hash:', result); // const output = await ipfs.files.cat(result);\n\n      console.log('retrieved data:', 'https://ipfs.io/ipfs/' + result);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const onSubmit = async event => {\n    // event.preventDefault();\n    setLoader(true);\n    const buffer = buf;\n    await ipfs.add(buffer).then(response => {\n      const ipfsId = response[0].hash;\n      setHash(ipfsId);\n      setIpfsId(ipfsId);\n    }).catch(err => {\n      console.error(err);\n      alert('An error occurred. Please check the console');\n    });\n    setShowLinks(true);\n    setLoader(false);\n  };\n\n  const onMetadataSubmit = event => {\n    setShowMetadataForm(true);\n  };\n\n  if (loader) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload files to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choose file to upload to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: captureFile,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), showLinks && showLinks ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: [\"IPFS Hash: \", hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Non clickabe Link: https://ipfs.io/ipfs/\", hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://ipfs.io/ipfs/\" + hash,\n        children: \"Clickable Link to view file on IPFS \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          onMetadataSubmit();\n        },\n        children: \"Create MetaData\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), showMetadataForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            onMetadataSubmit();\n            onSubmit();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"name\",\n              value: name,\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"description\",\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"description\",\n              value: description,\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePush,\n            children: \"Upload IPFS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 6\n          }, this), updateHash && showMetadataForm && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"https://ipfs.io/ipfs/\", updateHash]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `https://ipfs.io/ipfs/${updateHash}`,\n              children: \"Clickable Link to view file on IPFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/MintNFT\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                children: \"MintNft\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 3\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"TL+gaujL7U8Lb9mZPUlwYlTYZvE=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/muneeb/Downloads/IPFS-upload-master/src/Home.js"],"names":["useState","Button","Form","Loader","encode","base64_encode","dotenv","IPFS","Link","config","secrets","process","env","REACT_APP_INFURA_PROJECT_ID","REACT_APP_INFURA_PROJECT_SECRET","encodedSecrets","ipfs","host","port","protocol","headers","Authorization","Home","buf","setBuf","hash","setHash","updateHash","setupdateHash","loader","setLoader","showLinks","setShowLinks","showMetadataForm","setShowMetadataForm","name","setName","description","setDescription","ipfsId","setIpfsId","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","input","Name","Description","image","handlePush","res","add","JSON","stringify","console","log","err","error","onSubmit","then","response","catch","alert","onMetadataSubmit","e","value"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport { Button,Form } from 'react-bootstrap';\nimport Loader from './Loader';\nimport { encode as base64_encode } from 'base-64';\nimport dotenv from 'dotenv'; // import dotenv as a module instead of using require\nimport IPFS from 'ipfs-api'; // use the recommended ES6 import syntax\n// import { Button } from 'antd';\nimport { Link } from 'react-router-dom';\ndotenv.config();\n\nconst secrets = process.env.REACT_APP_INFURA_PROJECT_ID + ':' + process.env.REACT_APP_INFURA_PROJECT_SECRET;\nconst encodedSecrets = base64_encode(secrets);\n\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    Authorization: 'Basic ' + encodedSecrets,\n  },\n});\n\nfunction Home() {\n  const [buf, setBuf] = useState(null); \n  const [hash, setHash] = useState('');\n  const [updateHash, setupdateHash] = useState('');\n  const [loader, setLoader] = useState(false);\n  const [showLinks, setShowLinks] = useState(false);\n  const [showMetadataForm, setShowMetadataForm] = useState(false);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [ipfsId, setIpfsId] = useState('');\n\n  const captureFile = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => convertToBuffer(reader);\n  };\n\n  const convertToBuffer = async (reader) => {\n    const buffer = await Buffer.from(reader.result);\n    setBuf(buffer);\n  };\n\n  const input = {\n    Name: name,\n    Description: description,\n    image: 'https://ipfs.io/ipfs/' + hash,\n  };\n\n \n  const handlePush = async () => {\n    try {\n      const res = await ipfs.files.add(Buffer.from(JSON.stringify(input)));\n      const result = res[0].hash;\n      setupdateHash(result);\n      console.log('added data hash:', result);\n      // const output = await ipfs.files.cat(result);\n      console.log('retrieved data:', 'https://ipfs.io/ipfs/' + result);\n\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  \n  const onSubmit = async (event) => {\n    // event.preventDefault();\n    setLoader(true);\n    const buffer = buf;\n    await ipfs\n      .add(buffer)\n      .then((response) => {\n        const ipfsId = response[0].hash;\n        setHash(ipfsId);\n        setIpfsId(ipfsId);\n      })\n      .catch((err) => {\n        console.error(err);\n        alert('An error occurred. Please check the console');\n      });\n    setShowLinks(true);\n    setLoader(false);\n  };\n\n\nconst onMetadataSubmit =  (event) => {\n  setShowMetadataForm(true); \n}\nif (loader) {\n  return <Loader />;\n}\nreturn (\n    <div>\n    <h1>Upload files to IPFS</h1>\n    <h5>Choose file to upload to IPFS</h5>\n    <Form onSubmit={onSubmit}>\n      <input type=\"file\" onChange={captureFile} required />\n      <Button type=\"submit\">Upload</Button>\n    </Form>\n\n    {showLinks && showLinks ?\n        <div>\n          <h6>IPFS Hash: {hash}</h6>\n          <p>Non clickabe Link: https://ipfs.io/ipfs/{hash}</p>\n          <a href={\"https://ipfs.io/ipfs/\" + hash}>Clickable Link to view file on IPFS </a>\n          <br></br><br></br>\n          <button onClick={()=>{onMetadataSubmit()}}>Create MetaData</button>\n            {showMetadataForm && (\n              <div>\n                <form onSubmit={(event) => {\n                     event.preventDefault();\n                     onMetadataSubmit();\n                     onSubmit();\n\n                     }}>\n                  <div>\n                    <label htmlFor=\"name\">Name:</label>\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"description\">Description:</label>\n                    <input\n                      type=\"text\"\n                      id=\"description\"\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                    />\n                  </div>\n            \n     <button onClick={handlePush}>Upload IPFS</button>\n     {updateHash && showMetadataForm && (\n  <div>\n    <p>https://ipfs.io/ipfs/{updateHash}</p>\n    <a href={`https://ipfs.io/ipfs/${updateHash}`}>Clickable Link to view file on IPFS</a>\n    <Link to = {\"/MintNFT\"}>\n        <br></br>\n        <br></br>\n  <Button >MintNft</Button>\n    </Link>\n  </div>\n)}\n\n                </form>\n              </div>\n              \n            )}  \n          <p>\n        </p>  \n            </div>\n        : \n      <p>\n\n      </p>  \n            \n    }\n    \n</div>\n\n);\n}\n\n\nexport default Home;\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}